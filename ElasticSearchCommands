#To get the list of indices from the elastic search
http://<ipAddress>:9200/_cat/indices?pretty=true
#To push a documents to a particular index
PUT /candidate_index/candidate/1?pretty=true
{
 "name" : "Donald John Trump",
 "affiliation" : "Republican",
 "age" : "69",
 "occupation" : "businessman",
 "twitter" : "https://twitter.com/realDonaldTrump",
 "website" : "http://www.donaldjtrump.com"
}
#To get the document for a particular index
GET /<indexName>/<documentType>/<documentID>?pretty=true
#To search under a particular index a property value
GET /<indexName>/_search?q=<propertyValue>&pretty=true
#To get all the mapping of this index
GET <indexName>/_mapping
#A sample command for creating or updating a document
curl -XPUT "[endpoint]/[index_name]/[type_name]/[id]" -d'
{
    [document body]
}'
# In elastic search documents are immutable and thus any change to the document 
# results in creation of new version and older version are marked for delete
#for deletion http VERB DELETE is used
# With elastic 7 type has been replaced with _doc 
DELETE <indexName>/_doc/<documentID>
# for update of the document use 
PUT <indexName>/_doc/<documentID>/_update
# for search of the document 
GET <indexNam>/_search/?q=<searchString>
# retry on conflicts is used to signify that in case the values changes from the last read, retry 
retry_on_conflicts=N>
PUT <indexName>/_doc/<documentID>?if_seq_no=<sequenceNo>&if_primary_term=<primaryTerm>
#Example of query payload
{
    "query": {
    	"match_phrase":{
    		"fieldname":"fieldvalue"
    	}
    }
}
{
    "query": {
    	"match":{
    		"fieldname":"fieldvalue"
    	}
    }
}
#Example of add new mapping for an index 
{
	"mappings":{
		"properties":{
			"id": {"type":"integer"},
			"year":{"type":"date"},
			"genre": {"type":"keyword"},
			"title": {"type":"text","analyzer":"english"}
		}
	}
}
#Example of filters which are boolean operations 
GET payload 
{
	"query":{
		"bool":{
			"must":{
				"term":{"title":"trek"}
			},
			"filter":{
				"range":{
					"year":{"gte":"2010"}
				}
			}
		}
	}
}
#Concept of proximity queries 
